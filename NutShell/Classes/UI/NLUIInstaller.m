/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id: NLUIInstaller.m 245 2010-05-30 14:18:05Z  $ */

#import "NLUIInstaller.h"
#import "NLEventDispatcher.h"

@interface NLUIInstaller( Private )

- ( void )updateProgressBar: ( NLEvent * )event;
- ( void )updatePhaseText: ( NLEvent * )event;
- ( void )updateStatusText: ( NLEvent * )event;
- ( void )installationComplete: ( NLEvent * )event;

@end

@implementation NLUIInstaller

@synthesize phaseText;
@synthesize statusText;
@synthesize progressBar;
@synthesize indeterminateProgressForNewPhases;
@synthesize playSoundOnInstallComplete;
@synthesize completeSound;
@synthesize installButton;
@synthesize quitButton;

- ( id )init
{
    if( ( self = [ super init ] ) )
    {
        [ self addEventListener: @"InstallerProgress" target: self selector: @selector( updateProgressBar: ) ];
        [ self addEventListener: @"InstallerPhase"    target: self selector: @selector( updatePhaseText: ) ];
        [ self addEventListener: @"InstallerStatus"   target: self selector: @selector( updateStatusText: ) ];
        [ self addEventListener: @"InstallerComplete" target: self selector: @selector( installationComplete: ) ];
        
        indeterminateProgressForNewPhases = YES;
        playSoundOnInstallComplete        = YES;
    }
    
    return self;
}

- ( void )updateProgressBar: ( NLEvent * )event
{
    ( void )event;
    
    [ progressBar setIndeterminate: NO ];
    [ progressBar stopAnimation:    nil ];
    [ progressBar setDoubleValue: progress ];
}

- ( void )updatePhaseText: ( NLEvent * )event
{
    ( void )event;
    
    [ phaseText setStringValue: [ NSString stringWithString: phase ] ];
    
    if( indeterminateProgressForNewPhases == YES )
    {
        [ progressBar setIndeterminate: NO ];
        [ progressBar startAnimation:   nil ];
    }
}

- ( void )updateStatusText: ( NLEvent * )event
{
    ( void )event;
    
    [ progressBar setIndeterminate: NO ];
    [ progressBar stopAnimation: nil ];
    [ statusText setStringValue: [ NSString stringWithString: status ] ];
}

- ( void )installationComplete: ( NLEvent * )event
{
    ( void )event;
    
    [ progressBar setIndeterminate: NO ];
    [ progressBar setDoubleValue:   100 ];
    
    [ installButton setEnabled: NO ];
    [ quitButton    setEnabled: YES ];
    
    if( playSoundOnInstallComplete == YES )
    {
        [ completeSound play ];
    }
}

- ( OSStatus )installWithTarget: ( NSString * )destTarget
{
    [ progressBar setMinValue:      0 ];
    [ progressBar setMaxValue:      100 ];
    [ progressBar setDoubleValue:   0 ];
    [ progressBar setIndeterminate: YES ];
    [ progressBar startAnimation:   nil ];
    
    return [ super installWithTarget: destTarget ];
}

- ( OSStatus )install
{
    return [ self install: nil ];
}

- ( OSStatus )install: ( id )sender
{
    OSStatus execStatus;
    
    ( void )sender;
    
    execStatus = [ super install ];
    
    if( execStatus == 0 )
    {
        [ installButton setEnabled: NO ];
        [ quitButton    setEnabled: NO ];
    }
    else
    {
        [ installButton setEnabled: YES ];
        [ quitButton    setEnabled: YES ];
    }
    
    return execStatus;
}

@end
