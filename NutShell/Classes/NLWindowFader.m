/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id: NLWindowFader.m 245 2010-05-30 14:18:05Z  $ */

#import "NLWindowFader.h"

@implementation NLWindowFader

@synthesize isFaded;
@synthesize closeAfterFade;
@synthesize fadeBy;
@synthesize fadeInterval;

+ ( id )faderWithWindow: ( NSWindow * )windowObject
{
    id fader = [ [ self alloc ] initWithWindow: windowObject ];
    
    return [ fader autorelease ];
}

- ( id )init
{
    if( ( self = [ super init ] ) )
    {
        fadeBy       = ( float )0.1;
        fadeInterval = ( float )0.025;
    }
    
    return self;
}

- ( id )initWithWindow: ( NSWindow * )windowObject
{
    if( ( self = [ self init ] ) )
    {
        window = windowObject;
        
        if( [ window alphaValue ] < 1 )
        {
            isFaded = YES;
        }
    }
    
    return self;
}

- ( void )doFade: ( NSTimer * )timerObject
{
    NSNumber * alpha;
    
    alpha = ( NSNumber * )[ timerObject userInfo ];
    
    [ window setAlphaValue: [ window alphaValue ] - fadeBy ];
    
    if( [ window alphaValue ] <= [ alpha floatValue ] )
    {
        [ timerObject invalidate ];
        
        isFading = NO;
        isFaded  = YES;
        
        if( closeAfterFade == YES )
        {
            [ window close ];
            [ window setAlphaValue: 1 ];
        }
    }
}

- ( void )doUnFade: ( NSTimer * )timerObject
{
    NSNumber * alpha;
    
    alpha = ( NSNumber * )[ timerObject userInfo ];
    
    [ window setAlphaValue: [ window alphaValue ] + fadeBy ];
    
    if( [ window alphaValue ] >= [ alpha floatValue ] )
    {
        [ timerObject invalidate ];
        
        isFading = NO;
        isFaded  = NO;
    }
}

- ( IBAction )fade: ( id )sender
{
    ( void )sender;
    
    [ self fade ];
}

- ( IBAction )unFade: ( id )sender
{
    ( void )sender;
    
    [ self unFade ];
}

- ( void )fade
{
    [ self fadeTo: 0 ];
}

- ( void )unFade
{
    [ self unFadeTo: 1 ];
}

- ( void )fadeTo: ( float )alphaValue
{
    NSNumber * alpha;
    
    if( [ timer isValid ] )
    {
        [ timer invalidate ];
        isFaded  = NO;
        isFading = NO;
    }
    
    if( isFading == NO && isFaded == NO )
    {
        isFading = YES;
        alpha    = [ NSNumber numberWithFloat: alphaValue ];
        timer    = [ NSTimer scheduledTimerWithTimeInterval: fadeInterval target: self selector: @selector( doFade: ) userInfo: alpha repeats: YES ];
    }
}


- ( void )unFadeTo: ( float )alphaValue
{
    NSNumber * alpha;
    
    if( [ timer isValid ] )
    {
        [ timer invalidate ];
        isFaded  = YES;
        isFading = NO;
    }
    
    if( isFading == NO && isFaded == YES )
    {
        isFading = YES;
        alpha    = [ NSNumber numberWithFloat: alphaValue ];
        timer    = [ NSTimer scheduledTimerWithTimeInterval: fadeInterval target: self selector: @selector( doUnFade: ) userInfo: alpha repeats: YES ];
    }
}

@end
