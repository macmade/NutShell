/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id: NLKeychainItem.m 248 2010-08-25 14:12:28Z  $ */

#import "NLKeychainItem.h"

@implementation NLKeychainItem

@synthesize name;
@synthesize itemExists;
@synthesize username;
@synthesize password;

+ ( id )createWithName: ( NSString * )itemName username: ( NSString * )itemUser
{
    id keychain = [ [ self alloc ] initWithName: itemName username: itemUser ];
    
    return [ keychain autorelease ];
}

- ( id )initWithName: ( NSString * )itemName username: ( NSString * )itemUser
{
    OSStatus status;
    UInt32 passwordLength;
    void * passwordData;
    
    if( ( self = [ super init ] ) )
    {
        name     = [ itemName copy ];
        username = [ itemUser copy ];
        
        status = SecKeychainFindGenericPassword
        (
            NULL,
            ( UInt32 )[ name length ],
            [ name cStringUsingEncoding: NSUTF8StringEncoding ],
            ( UInt32 )[ username length ],
            [ username cStringUsingEncoding: NSUTF8StringEncoding ],
            &passwordLength,
            &passwordData,
            &item
        );
        
        if( status == noErr )
        {
            itemExists = YES;
            password   = [ [ NSString alloc ] initWithCString: passwordData length: passwordLength ];
            
            SecKeychainItemFreeContent
            (
                NULL,
                passwordData
            );
        }
    }
    
    return self;
}

- ( BOOL )create
{
    OSStatus status;
    
    if( self.itemExists == YES )
    {
        return YES;
    }
    
    status = SecKeychainAddGenericPassword
    (
        NULL,
        ( UInt32 )[ name length ],
        [ name cStringUsingEncoding: NSUTF8StringEncoding ],
        ( UInt32 )[ username length ],
        [ username cStringUsingEncoding: NSUTF8StringEncoding ],
        ( UInt32 )[ password length ],
        [ password cStringUsingEncoding: NSUTF8StringEncoding ],
        &item
    );
    
    return status == noErr;
}

- ( BOOL )modify
{
    OSStatus status;
    
    if( self.itemExists == NO )
    {
        return [ self create ];
    }
    
    if( self.itemExists == NO )
    {
        return NO;
    }
    
    status = SecKeychainItemModifyAttributesAndData
    (
        item,
        NULL,
        ( UInt32 )[ password length ],
        [ password cStringUsingEncoding: NSUTF8StringEncoding ]
    );
    
    return status == noErr;
}

- ( BOOL )remove
{
    OSStatus status;
    
    if( self.itemExists == NO )
    {
        return YES;
    }
    
    status = SecKeychainItemDelete( item ); 
    
    return status == noErr;
}

- ( void )update
{
    OSStatus status;
    UInt32 passwordLength;
    void * passwordData;
    
    status = SecKeychainFindGenericPassword
    (
        NULL,
        ( UInt32 )[ name length ],
        [ name cStringUsingEncoding: NSUTF8StringEncoding ],
        ( UInt32 )[ username length ],
        [ username cStringUsingEncoding: NSUTF8StringEncoding ],
        &passwordLength,
        &passwordData,
        &item
     );
        
    if( status == noErr )
    {
        [ password release ];
        
        itemExists = YES;
        password   = [ [ NSString alloc ] initWithCString: passwordData length: passwordLength ];
        
        SecKeychainItemFreeContent
        (
            NULL,
            passwordData
        );
    }
    else
    {
        itemExists = NO;
    }
}

- ( void )dealloc
{
    CFRelease( item );
    
    [ name release ];
    [ username release ];
    [ password release ];
    [ super dealloc ];
}

@end
