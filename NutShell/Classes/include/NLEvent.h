/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id: NLEvent.h 245 2010-05-30 14:18:05Z  $ */

/*!
 * @header
 * 
 * @discussion  This file should not be included directly by application source
 *              files using the NutShell framework. Including 'NutShell.h' is
 *              preferred over importing individual files because it will use a
 *              precompiled version.
 */

// Local includes
#import "NLObject.h"

/*!
 * @abstract    Event object
 * 
 * @version     1.0
 * @namespace   NutShell
 */
@interface NLEvent: NLObject
{
@protected
    
    /*!
     * @abstract    Whether the event is propagating
     */
    BOOL propagating;
    
    /*!
     * @abstract    The event's target object
     */
    id target;
    
    /*!
     * @abstract    The event's name
     */
    NSString * name;
    
@private
    
    /*!
     * @abstract    Reserved 1
     * 
     * @discussion  Reserved instance variables to help ensure binary
     *              compatibility with future versions of the class.
     */
    id NL_r1 __attribute__( ( unused ) );
    
    /*!
     * @abstract    Reserved 2
     * 
     * @discussion  Reserved instance variables to help ensure binary
     *              compatibility with future versions of the class.
     */
    id NL_r2 __attribute__( ( unused ) );
}

/*! @property */
@property( assign, readwrite, getter=isPropagating ) BOOL propagating;

/*! @property */
@property( readonly ) id target;

/*! @property */
@property( readonly ) NSString *  name;

/*!
 * @abstract    Creates a new  event with a specific name
 * 
 * @param       eventName   The event's name
 * @return      The instance of the event object
 */
+ ( id )eventWithName: ( NSString * )eventName;

/*!
 * @abstract    Creates a new  event with a target object
 * 
 * @param       targetObject    The target object
 * @return      The instance of the event object
 */
+ ( id )eventWithTarget: ( id )targetObject;

/*!
 * @abstract    Creates a new event with a specific name and a target object
 * 
 * @param       eventName       The event's name
 * @param       targetObject    The target object
 * @return      The instance of the event object
 */
+ ( id )eventWithName: ( NSString * )eventName target: ( id )targetObject;

/*!
 * @abstract    Initializes a newly allocated event with a specific name
 * 
 * @param       eventName   The event's name
 * @return      The instance of the event object
 */
- ( id )initWithName: ( NSString * )eventName;

/*!
 * @abstract    Initializes a newly allocated event with a target object
 * 
 * @param       targetObject    The target object
 * @return      The instance of the event object
 */
- ( id )initWithTarget: ( id )targetObject;

/*!
 * @abstract    Initializes a newly allocated event with a specific name and a target object
 * 
 * @param       eventName       The event's name
 * @param       targetObject    The target object
 * @return      The instance of the event object
 */
- ( id )initWithName: ( NSString * )eventName target: ( id )targetObject;

@end
