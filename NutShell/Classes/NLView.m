/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id: NLView.m 252 2011-01-19 08:54:54Z macmade $ */

#import "NLView.h"
#import "NLColor.h"

@implementation NLView

@synthesize borderType;

- ( id )initWithFrame: ( NSRect )frameRect
{
    if( ( self = [ super initWithFrame: frameRect ] ) )
    {   
        self.borderType               = NSBezelBorder;
        self.backgroundColor          = [ NSColor finderSidebarColor ];
    }
    
    return self;
}

- ( void )dealloc
{
    [ backgroundColor release ];
    [ super dealloc ];
}

- ( NSColor * )backgroundColor
{
    [ backgroundColor release ];
    
    return backgroundColor;
}

- ( NSImage * )backgroundImage
{
    return backgroundImage;
}

- ( void )setBackgroundColor: ( NSColor * )color
{
    [ backgroundColor release ];
    
    backgroundColor    = [ color copy ];
    hasBackgroundImage = NO;
}

- ( void )setBackgroundImage: ( NSImage * )image
{
    backgroundImage    = [ image copy ];
    hasBackgroundImage = YES;
}

- ( void )drawBorder
{
    NSPoint        p1;
    NSPoint        p2;
    NSPoint        p3;
    NSPoint        p4;
    NSRect         bounds;
    NSBezierPath * left;
    NSBezierPath * top;
    NSBezierPath * right;
    NSBezierPath * bottom;
    
    bounds = [ self bounds ];
    left   = [ [ NSBezierPath alloc ] init ];
    top    = [ [ NSBezierPath alloc ] init ];
    right  = [ [ NSBezierPath alloc ] init ];
    bottom = [ [ NSBezierPath alloc ] init ];
    
    p1 = NSMakePoint( bounds.origin.x, bounds.origin.y );
    p2 = NSMakePoint( bounds.origin.x, bounds.origin.y + bounds.size.height );
    p3 = NSMakePoint( bounds.origin.x + bounds.size.width, bounds.origin.y );
    p4 = NSMakePoint( bounds.origin.x, bounds.origin.y );
    
    [ left moveToPoint: p1 ];
    [ top moveToPoint: p2 ];
    [ right moveToPoint: p3 ];
    [ bottom moveToPoint: p4 ];
    
    p1.y += bounds.size.height;
    p2.x += bounds.size.width;
    p3.y += bounds.size.height;
    p4.x += bounds.size.width;
    
    [ left lineToPoint: p1 ];
    [ top lineToPoint: p2 ];
    [ right lineToPoint: p3 ];
    [ bottom lineToPoint: p4 ];
    
    [ left setLineWidth: 2 ];
    [ top setLineWidth: 2 ];
    [ right setLineWidth: 2 ];
    [ bottom setLineWidth: 2 ];
    
    switch( borderType )
    {
        case NSBezelBorder:
            
            [ [ NSColor colorWithCalibratedHue: 0 saturation: 0 brightness: ( CGFloat )0.45 alpha: 1 ] set ];
            [ top stroke ];
            
            [ [ NSColor colorWithCalibratedHue: 0 saturation: 0 brightness: ( CGFloat )0.60 alpha: 1 ] set ];
            [ left stroke ];
            [ right stroke ];
            [ bottom stroke ];
            
            break;
            
        default:
            
            [ [ NSColor blackColor ] set ];
            [ left stroke ];
            [ top stroke ];
            [ right stroke ];
            [ bottom stroke ];
            
            break;
    }
    
    [ left release ];
    [ top release ];
    [ right release ];
    [ bottom release ];
}

- ( void )drawBackground
{
    NSBezierPath * path = [ NSBezierPath bezierPathWithRect: [ self bounds ] ];
    
    [ [ NSGraphicsContext currentContext ] setPatternPhase: NSMakePoint( 0, [self frame].size.height ) ];
    [ backgroundColor set ];
    [ path fill ];
}

- ( void )drawBackgroundImage
{
    // Thanx to Matteo Bertozzi for the example
    NSRect         bounds;
    NSRect         frame;
    NSBezierPath * path;
    NSImage      * pattern;
    NSImage      * foreground;
    NSImage      * clip;
    
    bounds  = [ self bounds ];
    frame   = [ self frame ];
    path    = [ NSBezierPath bezierPathWithRect: bounds ];
    pattern = [ [ NSImage alloc ] initWithSize: bounds.size];
    
    [ pattern lockFocus ];
    
    [ [ NSGraphicsContext currentContext ] setPatternPhase: NSMakePoint( 0, frame.size.height ) ];
    [ [ NSColor colorWithPatternImage: backgroundImage ] set];
    
    NSRectFill( bounds );
    
    [ pattern unlockFocus];
    
    if( NSEqualSizes( [ pattern size ], [ path bounds ].size ) )
    {
        foreground = pattern;
    }
    else
    {
        foreground = [ [ [ NSImage alloc] initWithSize: bounds.size ] autorelease ];
        
        [ foreground lockFocus ];
        [ pattern compositeToPoint: NSMakePoint( [ pattern size ].width / 2, [ pattern size ].height / 2) operation: NSCompositeSourceOver ];
        [ foreground unlockFocus ];
    }
    
    clip = [ [ [ NSImage alloc] initWithSize: bounds.size ] autorelease ];
    
    [ clip lockFocus ];
    [ path fill ];
    [ foreground compositeToPoint: bounds.origin operation: NSCompositeSourceIn ];
    [ clip unlockFocus ];
    [ clip compositeToPoint: bounds.origin operation: NSCompositeSourceOver ];
    [ pattern release ];
}

- ( void )drawRect: ( NSRect )rect
{
    ( void )rect;
    
    [ [ NSGraphicsContext currentContext ] saveGraphicsState ];

    if( hasBackgroundImage )
    {
        [ self drawBackgroundImage ];
    }
    else
    {
        [ self drawBackground ];
    }

    if( borderType == NSLineBorder || borderType == NSBezelBorder )
    {
        [ self drawBorder ];
    }

    [ [ NSGraphicsContext currentContext] restoreGraphicsState ];
}

@end
